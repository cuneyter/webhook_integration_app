services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${PORT:-3000}:3000"
    environment:
      - RAILS_ENV=production
      - RAILS_SERVE_STATIC_FILES=true
      - RAILS_LOG_TO_STDOUT=true
      - RAILS_MASTER_KEY=${RAILS_MASTER_KEY}
      - DATABASE_HOST=db
      - RAILS_MAX_THREADS=5
    volumes:
      - rails_storage:/rails/storage
    command: ["./bin/rails", "server", "-b", "0.0.0.0"]
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 360s
      timeout: 5s
      retries: 3
      start_period: 20s

  jobs:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - RAILS_ENV=production
      - RAILS_LOG_TO_STDOUT=true
      - RAILS_MASTER_KEY=${RAILS_MASTER_KEY}
      - DATABASE_HOST=db
      - RAILS_MAX_THREADS=7
    command: ["./bin/jobs"]
    volumes:
      - rails_storage:/rails/storage
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      app:
        condition: service_healthy

  db:
    image: postgres:16-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=webhook_integration_app_production
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 360s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  postgres_data:
  rails_storage:
